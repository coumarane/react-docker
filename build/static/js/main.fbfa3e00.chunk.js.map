{"version":3,"sources":["assets/images/logo-react.svg","components/layout/header.tsx","components/layout/sidebar.tsx","components/layout/wrapper.tsx","pages/home/home.tsx","pages/contact/contact.list.tsx","pages/contact/contact.creation.tsx","services/contactLocalStorageService.ts","pages/contact/contact.tsx","pages/demo/exemple.tsx","pages/demo/communication.parentchild.tsx","pages/demo/communication.childparent.tsx","pages/demo/demo.tsx","AppRoutes.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Header","className","href","src","logo","alt","width","height","Sidebar","activeClassName","to","exact","Wrapper","role","this","props","title","style","paddingTop","children","React","Home","ContactList","datas","length","map","item","index","key","id","name","email","dateOfBirth","onClick","handleEdit","color","cursor","handleDelete","ContactCreation","initialContcatState","contact","setContact","document","editContact","handleReset","handleInputChange","e","preventDefault","target","value","onSubmit","handleSaveContact","type","placeholder","required","onChange","aria-describedby","max","min","ContactLocalStorageService","fetchContacts","dbcontacts","localStorage","getItem","JSON","parse","getById","filter","saveContact","auto_id","contacts","push","saveContacts","updateContact","existingContact","find","x","findIndex","deleteById","setItem","stringify","clearData","removeItem","Contact","renderDeleteAllButton","state","marginBottom","handleDeleteAll","loadContacts","setState","handleCreateOrUpdate","ExempleDemo","newContact","arr","newArr","join","DisplayContact","ParentToChild","getContact","Child","sendNewContact","ChildToParent","getContactFromChild","console","log","Demo","AppRoutes","path","component","history","createBrowserHistory","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fbfa3e00.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo-react.8e26f220.svg\";","import * as React from \"react\";\nimport logo from '../../assets/images/logo-react.svg';\n\nconst Header: React.FC = () => {\n  return (\n    <>\n      <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n        <a className=\"navbar-brand col-sm-3 col-md-2 mr-0\" href=\"/#/\">\n          <img src={logo} alt=\"Logo\" width=\"50\" height=\"50\" />{` `}React Typescript App\n        </a>\n      </nav>\n    </>\n  );\n};\n\nexport default Header;\n","import * as React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nconst Sidebar: React.FC = () => {\n  return (\n    <>\n      <div className=\"row\">\n        <nav className=\"col-md-2 d-none d-md-block bg-light sidebar\">\n          <div className=\"sidebar-sticky\">\n            <ul className=\"nav flex-column\">\n              <li className=\"nav-item\">\n                <NavLink className=\"nav-link\" activeClassName=\"active\" to=\"/\" exact>\n                  <i className=\"fa fa-home\" />\n                  {``} Home page\n                </NavLink>\n              </li>\n\n              <li className=\"nav-item\">\n                <NavLink className=\"nav-link\" activeClassName=\"active\" to=\"/demo\">\n                  <i className=\"fa fa-apple\" />\n                  {``} Demo page\n                </NavLink>\n              </li>\n\n              <li className=\"nav-item\">\n                <NavLink className=\"nav-link\" activeClassName=\"active\" to=\"/contact\">\n                  <i className=\"fa fa-users\" />\n                  {``} Contact page\n                </NavLink>\n              </li>\n            </ul>\n          </div>\n        </nav>\n      </div>\n    </>\n  );\n};\n\nexport default Sidebar;\n","import * as React from \"react\";\n\ninterface IOwnProps {\n  title: string;\n}\n\nexport class Wrapper extends React.Component<IOwnProps> {\n  render() {\n    return (\n      <div role=\"main\" className=\"col-md-9 ml-sm-auto col-lg-10 px-4\">\n        {/* <div className=\"row\" style={{ paddingTop: \"2px\" }}>\n              <div className=\"col-md-12\">{``}</div>\n            </div> */}\n        <div className=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">\n          <h1 className=\"h2\">{this.props.title}</h1>\n        </div>\n        <div className=\"row\" style={{ paddingTop: \"50px\" }}>\n          <div className=\"col-md-12\">{``}</div>\n        </div>\n\n        {this.props.children}\n      </div>\n    );\n  }\n}\n","import * as React from \"react\";\nimport { Wrapper } from \"../../components/layout/wrapper\";\n\nconst Home = () => {\n  return (\n    <>\n      <Wrapper title={\"Home\"}>\n        <h1>Welcome to React app</h1>\n      </Wrapper>\n    </>\n  );\n};\n\n\nexport default Home;","import * as React from \"react\";\nimport { IContact } from \"../../models/contact\";\n\ninterface IOwnProps {\n datas: IContact[];\n handleDelete: (id: number) => (e: React.MouseEvent) => void;\n handleEdit: (id: number) => (e: React.MouseEvent) =>  void;\n}\n\nconst ContactList: React.FunctionComponent<IOwnProps> = (props) => {\n\n  return (\n    <>\n      <h6>Contact list</h6>\n      <div className=\"table-responsive\">\n        <table className=\"table table-striped table-sm\">\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>Name</th>\n              <th>Email</th>\n              <th>Date of birth</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {props.datas &&\n              props.datas.length > 0 &&\n              props.datas.map((item, index) => {\n                return (\n                  <React.Fragment key={index}>\n                    <tr>\n                      <td>{item.id}</td>\n                      <td>{item.name}</td>\n                      <td>{item.email}</td>\n                      <td>{item.dateOfBirth}</td>\n                      <th>\n                        <i className=\"fa fa-edit\" onClick={props.handleEdit(item.id)} style={{color: '##0d903c', cursor: 'pointer'}}>&nbsp;</i> | <i className=\"fa fa-trash\" onClick={props.handleDelete(item.id)} style={{color: 'red', cursor: 'pointer'}}>&nbsp;</i>\n                        </th>\n                    </tr>\n                  </React.Fragment>\n                );\n              })}\n          </tbody>\n        </table>\n      </div>\n    </>\n  );\n};\n\nexport default ContactList;\n","import * as React from \"react\";\nimport { IContact } from \"../../models/contact\";\n\ninterface IOwnProps {\n  handleSaveContact: (contact: IContact) => void;\n  editContact?: IContact;\n}\n\nconst ContactCreation: React.FunctionComponent<IOwnProps> = (\n  props: IOwnProps\n) => {\n  const initialContcatState: IContact = {\n    id: 0,\n    name: \"\",\n    email: \"\",\n    dateOfBirth: \"\"\n  };\n  \n  // contact is a state variable\n  const [contact, setContact] = React.useState(initialContcatState);\n\n  // Similar to componentDidMount, componentDidUpdate and componentWillUnmount\n  React.useEffect(() => {\n    // Update document title via browser API\n    if (contact.name !== \"\") {\n      document.title = `The entered name is ${contact.name}`;\n    }\n  }, [contact.name]); // Execute the effect only if contact.name has changed\n\n  React.useEffect(() => {\n    if (props.editContact) {\n      setContact(props.editContact!)\n    }\n  }, [props.editContact])\n\n  const handleReset = () => {\n    setContact(initialContcatState);\n  }\n\n  const handleSubmit = (\n    e: any // React.SyntheticEvent<HTMLInputElement | HTMLButtonElement>\n  ) => {\n    e.preventDefault();\n    \n    // console.log(`ContactCreation::handleSubmit=>contact ${JSON.stringify(contact)}`);\n    props.handleSaveContact(contact);\n    handleReset();\n  };\n\n  /**\n   * Common input change event\n   * When the field is entered an event is raised and update the state\n   */\n  const handleInputChange = (\n    e: React.SyntheticEvent<HTMLInputElement | HTMLButtonElement>\n  ): void => {\n    e.preventDefault();\n\n    const target = e.target as any;\n    setContact(contact => ({ ...contact, [target.name]: target.value }));\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <div className=\"card bg-light mb-3\">\n          <div className=\"card-header\">New contact</div>\n          <div className=\"card-body\">\n            <div className=\"card-text\">\n              <div className=\"form-row\">\n                <div className=\"form-group col-md-4\">\n                  <label>Name</label>\n                  <input\n                    type=\"text\"\n                    name=\"name\"\n                    value={contact.name}\n                    placeholder=\"Enter name\"\n                    className=\"form-control\"\n                    required\n                    onChange={handleInputChange}\n                  />\n                </div>\n                <div className=\"form-group col-md-4\">\n                  <label>Email address</label>\n                  <input\n                    type=\"email\"\n                    name=\"email\"\n                    value={contact.email}\n                    placeholder=\"Enter email\"\n                    className=\"form-control\"\n                    aria-describedby=\"emailHelp\"\n                    required\n                    onChange={handleInputChange}\n                  />\n                  <small id=\"emailHelp\" className=\"form-text text-muted\">\n                    We'll never share your email with anyone else.\n                  </small>\n                </div>\n\n                <div className=\"form-group col-md-4\">\n                  <label>Date of birth</label>\n                  <input\n                    type=\"date\"\n                    max=\"2020-12-01\"\n                    min=\"1900-12-01\"\n                    name=\"dateOfBirth\"\n                    value={contact.dateOfBirth}\n                    placeholder=\"Enter date of birth\"\n                    className=\"form-control\"\n                    required\n                    onChange={handleInputChange}\n                  />\n                </div>\n\n              </div>\n\n              {contact.id > 0 && <input className=\"btn btn-outline-danger\" type=\"submit\" value=\"Update\" />}{` `}\n              {contact.id <= 0 && <input className=\"btn btn-outline-primary\" type=\"submit\" value=\"Save\" />}{` `}\n              <input className=\"btn btn-outline-warning\" type=\"button\" value=\"Reset\" onClick={handleReset} />{` `}\n            </div>\n          </div>\n        </div>\n      </form>\n    </>\n  );\n};\n\nexport default ContactCreation;\n","import { IContact } from \"../models/contact\";\n\nclass ContactLocalStorage {\n  private key: string = \"contacts\"\n\n  //#region query\n  fetchContacts = () => {\n    const dbcontacts = localStorage.getItem(this.key);\n    if (dbcontacts) {\n      const contacts: IContact[] = JSON.parse(dbcontacts);\n      return contacts;\n    }\n    return null;\n  };\n\n  getById = (id: number) => {\n    const dbcontacts = this.fetchContacts()\n    if (dbcontacts) {\n      const contact = dbcontacts.filter(item => item.id === id)\n      return contact[0]\n    }\n    return null\n  }\n  //#endregion\n\n  //#region command\n  saveContact = (contact: IContact) => {\n    let auto_id: number = 1;\n\n    // console.log(`localStorageService::saveContact=>contact ${JSON.stringify(contact)}`);\n    let contacts: IContact[] = [];\n    const dbcontacts = this.fetchContacts();\n    if (dbcontacts) {\n      contacts = dbcontacts;\n      auto_id = contacts.length + 1\n    }\n    contact.id = auto_id;\n    contacts.push(contact);\n    this.saveContacts(contacts)\n  };\n\n  updateContact = (id: number, contact: IContact) => {\n    let dbcontacts = this.fetchContacts();\n    if (dbcontacts) {\n      let existingContact = dbcontacts.find(x => x.id === id)\n      const index = dbcontacts.findIndex(x => x.id === id)\n      if (existingContact) {\n        existingContact.name = contact.name\n        existingContact.email = contact.email\n        existingContact.dateOfBirth = contact.dateOfBirth\n        dbcontacts[index] = existingContact\n      }\n      this.saveContacts(dbcontacts)\n    }\n  };\n\n  deleteById = (id: number) => {\n    const dbcontacts = this.fetchContacts()\n    if (dbcontacts) {\n      const contacts = dbcontacts.filter(item => item.id !== id)\n      this.saveContacts(contacts)\n    }\n  }\n\n  saveContacts = (contacts: IContact[] ) => {\n    localStorage.setItem(this.key, JSON.stringify(contacts));\n  }\n\n  clearData = () => {\n    localStorage.removeItem(this.key)\n  }\n  //#endregion\n}\n\nconst ContactLocalStorageService = new ContactLocalStorage();\nexport default ContactLocalStorageService;\n","import * as React from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport ContactList from \"./contact.list\";\nimport { IContact } from \"../../models/contact\";\nimport ContactCreation from \"./contact.creation\";\nimport ContactLocalStorageService from \"../../services/contactLocalStorageService\";\nimport { Wrapper } from \"../../components/layout/wrapper\";\n\ninterface IOwnState {\n  contacts: IContact[];\n  editContact: IContact;\n}\n\ntype IUnionProps = RouteComponentProps<any>;\n\nclass Contact extends React.Component<IUnionProps, IOwnState> {\n  constructor(props: IUnionProps) {\n    super(props);\n\n    const initialContcatState: IContact = {\n      id: 0,\n      name: \"\",\n      email: \"\",\n      dateOfBirth: \"\"\n    };\n\n    // const [contacts, setContacts] = React.useState({});\n    this.state = {\n      contacts: [],\n      editContact: initialContcatState\n    };\n  }\n\n  componentDidMount() {\n    this.loadContacts();\n  }\n\n  render() {\n    return (\n      <>\n        <Wrapper title={\"Contact\"}>\n          <ContactCreation\n            handleSaveContact={this.handleCreateOrUpdate}\n            editContact={this.state.editContact}\n          />\n\n          <ContactList\n            datas={this.state.contacts}\n            handleDelete={this.handleDelete}\n            handleEdit={this.handleEdit}\n          />\n\n          {this.renderDeleteAllButton()}\n        </Wrapper>\n      </>\n    );\n  }\n\n  renderDeleteAllButton = () => {\n    const { contacts } = this.state;\n    if (contacts && contacts.length > 0) {\n      return (\n        <>\n          <div className=\"row\">\n            <div className=\"col-md-12\" style={{ marginBottom: \"10px\" }}>\n              <button\n                className=\"btn btn-warning\"\n                onClick={this.handleDeleteAll}\n              >\n                Delete all\n              </button>\n            </div>\n          </div>\n        </>\n      );\n    } else {\n      return null;\n    }\n  };\n\n  loadContacts = () => {\n    const dbcontacts = ContactLocalStorageService.fetchContacts();\n    this.setState({ contacts: dbcontacts! });\n  };\n\n  handleCreateOrUpdate = (contact: IContact) => {\n    if (contact.id > 0) {\n      ContactLocalStorageService.updateContact(contact.id, contact);\n    } else {\n      ContactLocalStorageService.saveContact(contact);\n    }\n    // this.handleHideForm();\n    this.loadContacts();\n  };\n\n  handleDelete = (id: number) => (e: React.MouseEvent) => {\n    ContactLocalStorageService.deleteById(id);\n    this.loadContacts();\n  };\n\n  handleEdit = (id: number) => (e: React.MouseEvent) => {\n    const contact = ContactLocalStorageService.getById(id);\n    if (contact) {\n      // console.log(`handleEdit=>contact: ${JSON.stringify(contact)}`)\n      this.setState({ editContact: contact });\n    }\n  };\n\n  handleDeleteAll = () => {\n    ContactLocalStorageService.clearData();\n    this.loadContacts();\n  };\n}\n\nexport default Contact;\n","import * as React from \"react\";\nimport { IContact } from \"../../models/contact\";\n\nexport const ExempleDemo: React.FC = props => {\n  const spreadObject: IContact = {\n    id: 1,\n    name: \"Kumar\",\n    email: \"c.coumarane@gmail.com\",\n    dateOfBirth: \"24/07/1975\"\n  };\n  const newContact = { ...spreadObject, name: \"Coumarane\" };\n\n  const arr: string[] = [\"Kumar\", \"Coumarane\", \"Helios\"];\n  const newArr = [...arr, \"Karma\"];\n\n  return (\n    <>\n      <div className=\"card\">\n        <div className=\"card-body\">\n          <b>Object destructuring:</b>\n          <br />\n          {/* <code>\n          const spreadObject: IContact = {\n            id: 1,\n            name: \"Kumar\",\n            email: \"c.coumarane@gmail.com\",\n            dateOfBirth: \"24/07/1975\"\n          };\n          const newContact = { ...spreadObject, name: \"Coumarane\" };\n          </code> */}\n          <p>\n            Name: {newContact.name}<br />\n            Email: {newContact.email}\n          </p>\n          <hr />\n          <b>Array destructuring:</b>\n          <br />\n          <code>\n          const arr: string[] = [\"Kumar\", \"Coumarane\", \"Helios\"];\n          <br />\n          const newArr = [...arr, \"COUPPANE\"];\n          </code>\n          <br />\n          {newArr.join(\" // \")}\n          <hr />\n          <b>Arrow function:</b>\n         \n          <br />\n          <code>\n            arr.map((item, index) => item);\n          </code>\n          <ul>\n          {arr.map((item, index) => (\n            <React.Fragment key={index}>\n            <li>{item}</li>\n            </React.Fragment>\n          ))}\n          </ul>\n          \n        </div>\n      </div>\n    </>\n  );\n};\n","import * as React from \"react\";\nimport { IContact } from \"../../models/contact\";\n\n/************** Child **************** */\ninterface IOwnProps {\n  contact: IContact;\n}\nconst DisplayContact: React.FunctionComponent<IOwnProps> = props => {\n  const { contact } = props;\n  return (\n    <>\n      <p>\n        Name: {contact.name}\n        <br />\n        Email: {contact.email}\n        <br />\n        Date of birth: {contact.dateOfBirth}\n        <br />\n      </p>\n    </>\n  );\n};\n\n/************* Parent ***************** */\ninterface IOwnState {\n  contact: IContact;\n}\n\nclass ParentToChild extends React.Component<{}, IOwnState> {\n  constructor(props: {}) {\n    super(props);\n\n    const initialState: IContact = {\n      id: 0,\n      name: \"\",\n      email: \"\",\n      dateOfBirth: \"\"\n    };\n\n    this.state = {\n      contact: initialState\n    };\n  }\n\n  componentDidMount() {\n    this.getContact();\n  }\n\n  /**\n   * Retrieve contact by its id from back-end\n   */\n  getContact = () => {\n    // fake data\n    const apiGetContact: IContact = {\n      id: 1,\n      name: \"Coumarane COUPPANE\",\n      email: \"c.coumarane@gmail.com\",\n      dateOfBirth: \"24/07/1975\"\n    };\n    this.setState({\n      contact: apiGetContact\n    });\n  };\n\n  render() {\n    const { contact } = this.state;\n    return (\n      <>\n        <div className=\"card\">\n          <div className=\"card-body\">\n            <p>\n              <b>Communication</b>\n            </p>\n            {contact && contact.id > 0 && <DisplayContact contact={contact} />}\n            {contact.id === 0 && <div>Contact is empty :-) </div>}\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default ParentToChild;\n","import * as React from \"react\";\nimport { IContact } from \"../../models/contact\";\n\n/************** Child **************** */\ninterface IOwnProps {\n  sendNewContact: (contact: IContact) => void;\n}\n\nconst Child: React.FunctionComponent<IOwnProps> = props => {\n  const handleContactChange = () => {\n    const contactModified: IContact = {\n      id: 2,\n      name: \"Kumar\",\n      email: \"coumarane.couppane@devoteam.com\",\n      dateOfBirth: \"00/00/0000\"\n    };\n    props.sendNewContact(contactModified);\n  };\n\n  return (\n    <>\n      <p>\n        Contact edited:<br />\n        <button onClick={handleContactChange}>New contact</button>\n      </p>\n    </>\n  );\n};\n\n/************* Parent ***************** */\ninterface IDisplayProps {\n  contact: IContact;\n}\nconst DisplayContact: React.FunctionComponent<IDisplayProps> = props => {\n  const { contact } = props;\n  return (\n    <>\n      <p>\n        Name: {contact.name}\n        <br />\n        Email: {contact.email}\n        <br />\n        Date of birth: {contact.dateOfBirth}\n        <br />\n      </p>\n    </>\n  );\n};\n\ninterface IOwnState {\n  contact: IContact;\n}\n\nclass ChildToParent extends React.Component<{}, IOwnState> {\n  constructor(props: {}) {\n    super(props);\n\n    const initialState: IContact = {\n      id: 0,\n      name: \"\",\n      email: \"\",\n      dateOfBirth: \"\"\n    };\n\n    this.state = {\n      contact: initialState\n    };\n  }\n\n  componentDidMount() {\n    this.getContact();\n  }\n\n  /**\n   * Retrieve contact by its id from back-end\n   */\n  getContact = () => {\n    // fake data\n    const apiGetContact: IContact = {\n      id: 1,\n      name: \"Coumarane COUPPANE\",\n      email: \"c.coumarane@gmail.com\",\n      dateOfBirth: \"24/07/1975\"\n    };\n    this.setState({\n      contact: apiGetContact\n    });\n  };\n\n  getContactFromChild = (contact: IContact) => {\n    console.log(`child contact: ${contact}`)\n    this.setState({\n      contact\n    });\n  };\n\n  render() {\n    const { contact } = this.state;\n    return (\n      <>\n        <div className=\"card\">\n          <div className=\"card-body\">\n            <p>\n              <b>Communication</b>\n            </p>\n            <p>\n              <Child sendNewContact={this.getContact} />\n            </p>\n            {contact && contact.id > 0 && <DisplayContact contact={contact} />}\n            {contact.id === 0 && <div>Contact is empty :-) </div>}\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default ChildToParent;\n","import * as React from \"react\";\nimport { ExempleDemo } from \"./exemple\";\nimport { Wrapper } from \"../../components/layout/wrapper\";\nimport ParentToChild from \"./communication.parentchild\";\nimport ChildToParent from \"./communication.childparent\";\n\nconst Demo = () => {\n  return (\n    <>\n      <Wrapper title={\"Demo\"}>\n        <ExempleDemo />\n\n        <ParentToChild />\n\n        <ChildToParent />\n      </Wrapper>\n    </>\n  );\n};\n\nexport default Demo;\n","import * as React from \"react\";\r\nimport { Route, Switch } from \"react-router\";\r\nimport Home from \"./pages/home/home\";\r\nimport Contact from \"./pages/contact/contact\";\r\nimport Demo from \"./pages/demo/demo\";\r\n\r\nexport const AppRoutes: React.FC = () => (\r\n  <Switch>\r\n    <Route exact path={\"/\"} component={Home} />\r\n    <Route path={\"/contact\"} component={Contact} />\r\n    <Route path={\"/demo\"} component={Demo} />\r\n  </Switch>\r\n);\r\n","import * as React from \"react\";\r\nimport { BrowserRouter, Router } from \"react-router-dom\";\r\nimport { createBrowserHistory } from \"history\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"font-awesome/css/font-awesome.min.css\";\r\nimport \"./assets/styles/layout.scss\";\r\n\r\nimport Header from \"./components/layout/header\";\r\nimport Sidebar from \"./components/layout/sidebar\";\r\nimport { AppRoutes } from \"./AppRoutes\";\r\n\r\nconst history = createBrowserHistory();\r\n\r\nclass App extends React.Component<{}, {}> {\r\n  render() {\r\n    return (\r\n      <>\r\n        <BrowserRouter>\r\n          <Router history={history}>\r\n            <Header />\r\n\r\n            <div className=\"container-fluid\">\r\n              <Sidebar />\r\n              <AppRoutes />\r\n            </div>\r\n          </Router>\r\n        </BrowserRouter>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}